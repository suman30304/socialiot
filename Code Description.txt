SIoT Attack Detection Project

This repository contains two Python scripts for processing and analyzing network traffic data to detect social engineering attacks in Social Internet of Things (SIoT) environments, as described in the research paper on leveraging behavioral biometrics and AI.

Files

1. IOTM.py

Purpose: Preprocesses the CIC IoT-DIAD 2024 dataset to prepare it for machine learning tasks.

Functionality:





Data Loading and Labeling: Loads network traffic data from CSV files (BenignTraffic, DictionaryBruteForce, DNS_Spoofing, MITM-ArpSpoofing) and maps labels to numerical values (0: Benign, 1: BruteForce, 2: DNSSpoofing, 3: ARPSpoofing).



Feature Selection: Retains relevant features (e.g., Protocol, Flow Duration, Packet Length, etc.) and removes non-informative columns (e.g., Flow ID, Src IP).



Data Merging and Cleaning: Merges multiple datasets, removes redundant columns, and saves the cleaned dataset as cleaned_dataset.csv.



Note: Includes commented-out code for initial dataset merging from raw PCAP flow CSVs, which can be used if starting from raw data.

Output: A cleaned CSV file (cleaned_dataset.csv) with selected features and numerical class labels.

2. IOTAttackDetection.py

Purpose: Trains and evaluates machine learning models to detect social engineering attacks in SIoT environments using the preprocessed dataset.

Functionality:





Data Loading: Loads the preprocessed dataset (cleaned_dataset.xlsx or .csv) generated by IOTM.py.



Model Training: Trains four models—Random Forest, XGBoost, LSTM, and CNN—on network traffic features to classify traffic as Benign (0), BruteForce (1), DNSSpoofing (2), or ARPSpoofing (3).



Evaluation: Computes performance metrics (accuracy, precision, recall, F1-score) and generates:





Table 4.1: Model performance metrics (%).



Table 4.2: Confusion matrix for XGBoost.



Table 4.3: Model accuracy by attack type (BruteForce, DNSSpoofing, ARPSpoofing).



Figure 4.1: ROC curve for XGBoost.



Figure 4.2: AUC performance comparison of models (including placeholders for Deep Learning and SVM).



Outputs: Saves results to CSV files (model_performance_metrics.csv, confusion_matrix_xgboost.csv, attack_type_accuracy.csv) and visualizations as PNG files (roc_curve_xgboost.png, auc_comparison.png).

Dependencies:





Python libraries: pandas, numpy, scikit-learn, xgboost, tensorflow, matplotlib, seaborn.



Environment variables are set to mitigate TensorFlow GPU-related errors.

Usage





Run IOTM.py to preprocess raw dataset files into a single cleaned_dataset.csv.



Update the file path in IOTAttackDetection.py to point to cleaned_dataset.csv (or convert to .xlsx if needed).



Execute IOTAttackDetection.py to train models, evaluate performance, and generate results as per the research paper.

Notes





Ensure the dataset file path in IOTAttackDetection.py is correct.



The scripts assume the dataset is preprocessed as described in the research paper (e.g., Min-Max normalization, missing value imputation).



GPU-related errors are mitigated using environment variables; adjust as needed for your environment.